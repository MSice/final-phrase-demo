{"remainingRequest":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/thread-loader/dist/cjs.js!/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/babel-loader/lib/index.js!/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/ts-loader/index.js??ref--14-3!/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/suqi04/baidu/baidu/final-phrase-demo/src/views/creation/index.vue?vue&type=script&setup=true&lang=ts","dependencies":[{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/src/views/creation/index.vue","mtime":1711792148509},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/babel.config.js","mtime":1711259280940},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/cache-loader/dist/cjs.js","mtime":1711627298830},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/thread-loader/dist/cjs.js","mtime":1711627298831},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/babel-loader/lib/index.js","mtime":1711627299187},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/ts-loader/index.js","mtime":1711627299230},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/cache-loader/dist/cjs.js","mtime":1711627298830},{"path":"/Users/suqi04/baidu/baidu/final-phrase-demo/node_modules/vue-loader-v16/dist/index.js","mtime":1711627299184}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}