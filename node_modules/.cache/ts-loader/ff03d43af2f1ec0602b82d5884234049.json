{"remainingRequest":"/Users/bytedance/code/final-phrase-demo/node_modules/thread-loader/dist/cjs.js!/Users/bytedance/code/final-phrase-demo/node_modules/babel-loader/lib/index.js!/Users/bytedance/code/final-phrase-demo/node_modules/ts-loader/index.js??ref--14-3!/Users/bytedance/code/final-phrase-demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/bytedance/code/final-phrase-demo/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/bytedance/code/final-phrase-demo/src/components/title.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/Users/bytedance/code/final-phrase-demo/src/components/title.vue","mtime":1720012949366},{"path":"/Users/bytedance/code/final-phrase-demo/babel.config.js","mtime":1720003914930},{"path":"/Users/bytedance/code/final-phrase-demo/node_modules/cache-loader/dist/cjs.js","mtime":1720003915936},{"path":"/Users/bytedance/code/final-phrase-demo/node_modules/thread-loader/dist/cjs.js","mtime":1720003919432},{"path":"/Users/bytedance/code/final-phrase-demo/node_modules/babel-loader/lib/index.js","mtime":1720003915886},{"path":"/Users/bytedance/code/final-phrase-demo/node_modules/ts-loader/index.js","mtime":1720003919451},{"path":"/Users/bytedance/code/final-phrase-demo/node_modules/cache-loader/dist/cjs.js","mtime":1720003915936},{"path":"/Users/bytedance/code/final-phrase-demo/node_modules/vue-loader-v16/dist/index.js","mtime":1720003919760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}